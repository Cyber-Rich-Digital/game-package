definitions:
  handler.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  main.ping:
    properties:
      message:
        example: pong
        type: string
    type: object
  model.AdminChangePassword:
    properties:
      password:
        maxLength: 30
        minLength: 6
        type: string
    required:
    - password
    type: object
  model.CreateUser:
    properties:
      email:
        type: string
      password:
        maxLength: 30
        minLength: 6
        type: string
      username:
        maxLength: 30
        minLength: 6
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.DeviceBody:
    properties:
      fcmToken:
        type: string
      hardwareId:
        type: string
      websiteId:
        type: integer
    required:
    - websiteId
    type: object
  model.Login:
    properties:
      email:
        maxLength: 30
        minLength: 6
        type: string
      password:
        maxLength: 30
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  model.MessageBody:
    properties:
      apiKey:
        type: string
      message:
        type: string
      tag:
        type: string
    required:
    - apiKey
    - message
    - tag
    type: object
  model.MessageRead:
    properties:
      deviceId:
        type: integer
      tagId:
        type: integer
    required:
    - deviceId
    - tagId
    type: object
  model.Pagination:
    properties:
      list: {}
      total:
        type: integer
    type: object
  model.ResponseAsList:
    properties:
      list: {}
    type: object
  model.Success:
    properties:
      message:
        example: success
        type: string
    type: object
  model.SuccessWithData:
    properties:
      data: {}
      message:
        example: success
        type: string
    type: object
  model.SuccessWithToken:
    properties:
      message:
        example: success
        type: string
      token: {}
    type: object
  model.UserChangePassword:
    properties:
      oldPassword:
        maxLength: 30
        minLength: 6
        type: string
      password:
        maxLength: 30
        minLength: 6
        type: string
    required:
    - oldPassword
    - password
    type: object
  model.WebsiteBody:
    properties:
      domainName:
        type: string
      title:
        type: string
    required:
    - domainName
    - title
    type: object
info:
  contact: {}
paths:
  /be/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SuccessWithToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Login
      tags:
      - Back Auth
  /be/menu:
    get:
      consumes:
      - application/json
      description: get menu by role
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseAsList'
      security:
      - BearerAuth: []
      summary: GetMenu
      tags:
      - Back Menu
  /be/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/model.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Register
      tags:
      - Back Auth
  /be/register/admin:
    post:
      consumes:
      - application/json
      description: Register Admin
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/model.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Register Admin
      tags:
      - Back Auth
  /be/tags/{id}:
    delete:
      consumes:
      - application/json
      description: delete tag by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: DeleteTag
      tags:
      - Back Tags
  /be/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - Back Users
  /be/users/admin:
    get:
      consumes:
      - application/json
      description: Get All Admin
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: sort
        in: query
        name: sort
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Pagination'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Admin
      tags:
      - Back Users
  /be/users/changepass/admin/{id}:
    put:
      consumes:
      - application/json
      description: Change Admin Password
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      - description: Change Password
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/model.AdminChangePassword'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change Admin Password
      tags:
      - Back Users
  /be/users/changepass/user/{id}:
    put:
      consumes:
      - application/json
      description: Change User Password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Change Password
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/model.UserChangePassword'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change User Password
      tags:
      - Back Users
  /be/users/create/admin:
    post:
      consumes:
      - application/json
      description: Create Admin
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/model.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Admin
      tags:
      - Back Users
  /be/users/user:
    get:
      consumes:
      - application/json
      description: Get All User
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: sort
        in: query
        name: sort
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Pagination'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All User
      tags:
      - Back Users
  /be/websites:
    post:
      consumes:
      - application/json
      description: create new website
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.WebsiteBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: CreateWebsite
      tags:
      - Back Websites
  /be/websites/{id}:
    delete:
      consumes:
      - application/json
      description: delete website
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: DeleteWebsite
      tags:
      - Back Websites
    patch:
      consumes:
      - application/json
      description: update website
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.WebsiteBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: UpdateWebsite
      tags:
      - Back Websites
  /be/websites/detail/{id}:
    get:
      consumes:
      - application/json
      description: get Website by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessWithToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetWebsite
      tags:
      - Back Websites
  /be/websites/list:
    get:
      consumes:
      - application/json
      description: get Websites
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: sort
        in: query
        name: sort
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessWithData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetWebsites
      tags:
      - Back Websites
  /devices:
    post:
      consumes:
      - application/json
      description: create device
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.DeviceBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SuccessWithToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: CreateDevice
      tags:
      - Devices
  /messages/list/{tag_id}:
    get:
      consumes:
      - application/json
      description: get Message by tag_id
      parameters:
      - description: tag_id
        in: path
        name: tag_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessWithToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetMessage
      tags:
      - Messages
  /messages/noti:
    post:
      consumes:
      - application/json
      description: push notification
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.MessageBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: PushNoti
      tags:
      - Messages
  /messages/read:
    post:
      consumes:
      - application/json
      description: set read message
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.MessageRead'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: SetRead
      tags:
      - Messages
  /ping:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ping'
      summary: ping example
      tags:
      - Test
  /tags/{website_id}:
    get:
      consumes:
      - application/json
      description: get all tags by websiteId
      parameters:
      - description: website_id
        in: path
        name: website_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessWithToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetTagByWebsiteId
      tags:
      - Tags
  /websites/{id}:
    get:
      consumes:
      - application/json
      description: get Website by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessWithToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetWebsite
      tags:
      - Websites
  /websites/totals/{date}:
    get:
      consumes:
      - application/json
      description: get Website totals
      parameters:
      - description: date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessWithToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetWebsiteTotals
      tags:
      - Websites
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
